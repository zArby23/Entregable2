@using CulturaVivaTours.Shared.Entities

@inject NavigationManager Navigation
@inject SweetAlertService swal
@inject HttpClient Http

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>
<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <div class="mb-3">
            <label>Ruta Establecida (ID)</label>
            <div>
                <InputSelect width="10" @bind-Value="@RutaAsignada.RutaId" class="form-select">
                    <option value="">Seleccione una ruta</option>
                    @foreach (var ruta in rutas)
                    {
                        <option value="@ruta.Id">@ruta.FirstName</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => RutaAsignada.RutaId)" />
            </div>
            <label>Guia Asignado (ID)</label>
            <div>
                <InputSelect width="10" @bind-Value="@RutaAsignada.GuiaId" class="form-select">
                    <option value="">Seleccione un guia</option>
                    @foreach (var guia in guias)
                    {
                        <option value="@guia.Id">@guia.FullName</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => RutaAsignada.GuiaId)" />
            </div>
            <button class="btn btn-primary" type="submit">Guardar</button>
            <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
        </div>
    </div>
</EditForm>

@code {
    private EditContext editContext = null!;
    private List<Guia> guias = new();
    private List<Ruta> rutas = new();

    protected override async Task OnInitializedAsync()
    {
        rutas = await Http.GetFromJsonAsync<List<Ruta>>("/api/rutas");
        guias = await Http.GetFromJsonAsync<List<Guia>>("/api/guias");
    }

    protected override void OnInitialized()
    {
        editContext = new(RutaAsignada);
    }

    [EditorRequired]
    [Parameter]
    public RutaAsignada RutaAsignada { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
    var formWasEdited = editContext.IsModified();

    if (!formWasEdited)
    {
        return;
    }

    if (FormPostedSuccessfully)
    {
        return;
    }

    var result = await swal.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Deseas abandonar la página y perder los cambios?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true
        });

    var confirm = !string.IsNullOrEmpty(result.Value);

    if (confirm)
    {
        return;
    }

    context.PreventNavigation();
    }
}
