@page "/rutas-asignadas"
@using CurrieTechnologies.Razor.SweetAlert2
@using CulturaVivaTours.Shared.Entities
@using CulturaVivaTours.WEB.Repositories
@using CulturaVivaTours.WEB.Shared

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal




<h1>Rutas Asignadas</h1>

@if (RutasAsignadas is null)
{
    <div class="spinner" />
}
else
{
    <GenericList MyList="RutasAsignadas">
        <Body>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-globe"></i> Rutas Asignadas
                        <a class="btn btn-sm btn-primary float-end" href="/rutas-asignadas/create"><i class="oi oi-plus"></i>Asignar rutas</a>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                        <table class="table table-stripped">
                            <thead>
                                <tr>
                                    <th>
                                        ID
                                    </th>
                                    <th>
                                        Nombre de la Ruta
                                    </th>
                                    <th>
                                        Nombre del Guía
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var rutaAsignada in RutasAsignadas!)
                                {
                                    <tr>
                                        <td>
                                            @rutaAsignada.Id
                                        </td>
                                        <td>
                                            @GetRutaName(rutaAsignada.RutaId)
                                        </td>
                                        <td>
                                            @GetGuiaName(rutaAsignada.GuiaId)
                                        </td>
                                        <td>
                                            <a href="/rutas-asignadas/edit/@rutaAsignada.Id" class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
                                            <button class="btn btn-danger btn-sm" @onclick=@(() => Delete(rutaAsignada))><i class="oi oi-trash" /> Borrar</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </Body>
    </GenericList>
}

@code {
    public List<RutaAsignada> RutasAsignadas { get; set; }
    public List<Ruta> Rutas { get; set; }
    public List<Guia> Guias { get; set; }

    private string GetRutaName(int rutaId)
    {
        var ruta = Rutas.FirstOrDefault(r => r.Id == rutaId);
        return ruta != null ? $"{ruta.FirstName}" : "N/A";
    }

    private string GetGuiaName(int guiaId)
    {
        var guia = Guias.FirstOrDefault(g => g.Id == guiaId);
        return guia != null ? $"{guia.FullName}" : "N/A";
    }

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var rutaResponse = await repository.GetAsync<List<Ruta>>("api/rutas");
        Rutas = rutaResponse.Response!;

        var guiaResponse = await repository.GetAsync<List<Guia>>("api/guias");
        Guias = guiaResponse.Response!;

        var rutaAsignadaResponse = await repository.GetAsync<List<RutaAsignada>>("api/rutasasignadas");
        RutasAsignadas = rutaAsignadaResponse.Response!;
    }

    private async Task Delete(RutaAsignada rutaAsignada)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync($"api/rutasasignadas/{rutaAsignada.Id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var errorMessage = await responseHttp.GetErrorMessage();
                await swal.FireAsync("Error", errorMessage, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }

    }
}

