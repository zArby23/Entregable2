@page "/rutas"
@using CurrieTechnologies.Razor.SweetAlert2
@using CulturaVivaTours.Shared.Entities
@using CulturaVivaTours.WEB.Repositories
@using CulturaVivaTours.WEB.Shared

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal


<h3>Rutas</h3>

@if (Rutas is null)
{
    <div class="spinner" />
}
else
{
    <GenericList MyList="Rutas">
        <Body>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-globe"></i> Rutas
                        <a class="btn btn-sm btn-primary float-end" href="/rutas/create"><i class="oi oi-plus"></i>Crear rutas</a>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                        <table class="table table-stripped">
                            <thead>
                                <tr>
                                    <th>
                                        Nombre
                                    </th>
                                    <th>
                                        Region
                                    </th>
                                    <th>
                                        Tiempo
                                    </th>
                                    <th>
                                        Experiencia
                                    </th>
                                    <th>
                                        Lenguaje
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var ruta in Rutas!)
                                {
                                    <tr>
                                        <td>
                                            @ruta.FirstName
                                        </td>
                                        <td>
                                            @ruta.Region
                                        </td>
                                        <td>
                                            @ruta.Time
                                        </td>
                                        <td>
                                            @ruta.Experience
                                        </td>
                                        <td>
                                            @ruta.Language
                                        </td>
                                        <td>
                                            <a href="/rutas/edit/@ruta.Id" class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
                                            <button class="btn btn-danger btn-sm" @onclick=@(() => Delete(ruta))><i class="oi oi-trash" /> Borrar</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </Body>
    </GenericList>
}


@code {
    public List<Ruta> Rutas { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHttp = await repository.GetAsync<List<Ruta>>("api/rutas");
        Rutas = responseHttp.Response!;
    }

    private async Task Delete(Ruta ruta)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync($"api/rutas/{ruta.Id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var errorMessage = await responseHttp.GetErrorMessage();
                await swal.FireAsync("Error", errorMessage, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }

    }
}
