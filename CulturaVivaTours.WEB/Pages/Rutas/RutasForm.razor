@using CulturaVivaTours.Shared.Entities

@inject NavigationManager Navigation
@inject SweetAlertService swal

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>
<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <div class="mb-3">


            <label>Nombre</label>
            <div>
                <InputText width="10" @bind-Value="@Ruta.FirstName" />
                <ValidationMessage For="@(() => Ruta.FirstName)" />
            </div>

            <label>Region</label>
            <div>
                <InputText width="10" @bind-Value="@Ruta.Region" />
                <ValidationMessage For="@(() => Ruta.Region)" />
            </div>
           
            <label>Tiempo</label>
            <div>
                <InputNumber width="10" @bind-Value="@Ruta.Time" />
                <ValidationMessage For="@(() => Ruta.Time)" />
            </div>

            <label>Experiencia</label>
            <div>
                <InputText width="10" @bind-Value="@Ruta.Experience" />
                <ValidationMessage For="@(() => Ruta.Experience)" />
            </div>

            <label>Lenguaje</label>
            <div>
                <InputText width="10" @bind-Value="@Ruta.Language" />
                <ValidationMessage For="@(() => Ruta.Language)" />
            </div>


        </div>
    </div>

   </EditForm>

@code {
    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new(Ruta);
    }

    [EditorRequired]
    [Parameter]
    public Ruta Ruta { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }

}
