@page "/Proveedores"
@using CulturaVivaTours.Shared.Entities
@using CurrieTechnologies.Razor.SweetAlert2
@using CulturaVivaTours.WEB.Repositories
@using CulturaVivaTours.WEB.Shared




@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal
<h1>Proveedor</h1>



@if (Proveedores is null)
{
    <div class="spinner" />
}
else
{
    <GenericList MyList="Proveedores">

        <Body>

            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-globe"></i> Proveedores
                        <a class="btn btn-sm btn-primary float-end" href="/Proveedores/create"><i class="oi oi-plus"></i> Crear Proveedor</a>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                    </div>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Proveedor</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var Proveedor in Proveedores!)
                            {
                                <tr>
                                    <td>
                                        @Proveedor.NombreProveedor
                                    </td>
                                    <td>
                                        @Proveedor.TipoServicio
                                    </td>
                                    <td>
                                        @Proveedor.Contacto
                                    </td>
                                    <td>
                                        @Proveedor.PuntosInteres
                                    </td>
                                    <td>
                                        <a href="/Proveedores/edit/@Proveedor.Id" class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
                                        <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(Proveedor))><i class="oi oi-trash" /> Borrar</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            

        </Body>

    </GenericList>
}




@code {


    public List<Proveedor> Proveedores { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHppt = await repository.GetAsync<List<Proveedor>>("/api/proveedores");
        Proveedores = responseHppt.Response!;
    }

    private async Task DeleteAsync(Proveedor Proveedor)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.DeleteAsync($"api/proveedores/{Proveedor.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessage();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
}